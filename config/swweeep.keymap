// vim: set ft=devicetree: commentstring=//%s:
/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define NAV     3

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 6>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <8 7>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <17 18>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <16 17>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <26 27>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <28 27>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <3 2>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <1 11>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <6 16>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        star {
            bindings = <&kp ASTERISK>;
            key-positions = <17 7>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <8 18>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <28 18>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <13 12>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        bang {
            bindings = <&kp EXCLAMATION>;
            key-positions = <21 11>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <27 17>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <26 16>;
            require-prior-idle-ms = <50>;
            layers = <DEFAULT>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 8 9 15 16 17 18 19 25 26 27 28 29 7>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 3 4 10 11 12 13 14 21 22 23 24 2 20>;
            hold-trigger-on-release;
        };

        thumb_lt: thumb_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        hsk: hold_or_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_OR_STICKY_KEY";
            bindings = <&kp>, <&skq>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        awm_super: awm_super {
            compatible = "zmk,behavior-tap-dance";
            label = "AWM_SUPER";
            #binding-cells = <0>;
            bindings = <&lmt LEFT_GUI ESCAPE>, <&lmt LS(LGUI) ESCAPE>;
        };

        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_QUICK_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
            ignore-modifiers;
        };

        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "LMT";
            bindings = <&lm1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
        lm: lm {
            label = "LAYER_MOD";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        lm1: lm1 {
            compatible = "zmk,behavior-macro-one-param";
            label = "LM1";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&mo 1 &macro_param_1to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&mo 1>;
        };

        warpd_normal: warpd_normal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(C))>;
            label = "WARPD_NORMAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q                 &kp W             &kp E                 &kp R              &kp T         &kp Y                  &kp U              &kp I       &kp O                  &kp P
  &hml RIGHT_CONTROL A  &hml RIGHT_ALT S  &kp D                 &kp F              &kp G         &kp H                  &kp J              &kp K       &hmr RIGHT_ALT L       &hmr RIGHT_CONTROL SEMICOLON
  &hml LEFT_SHIFT Z     &hml LEFT_GUI X   &kp C                 &kp V              &kp B         &kp N                  &kp M              &kp COMMA   &hmr RIGHT_GUI PERIOD  &hmr RIGHT_SHIFT SLASH
                                          &hsk LEFT_GUI LSHIFT  &thumb_lt 2 ENTER  &awm_super    &thumb_lt 1 BACKSPACE  &thumb_lt 3 SPACE  &caps_word
            >;

            label = "DEFAULT";
        };

        num_layer {
            bindings = <
  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
  &trans        &trans        &trans        &trans        &kp F11         &kp F12       &trans        &trans        &trans        &trans
                              &trans        &trans        &trans          &trans        &trans        &trans
            >;

            label = "NUM";
        };

        sym_layer {
            bindings = <
  &kp EXCL   &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR
  &kp GRAVE  &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH
  &kp TILDE  &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE
                     &trans    &trans    &trans       &trans     &trans     &trans
            >;

            label = "SYM";
        };

        nav_layer {
            bindings = <
  &bt BT_CLR    &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans          &trans          &kp PAGE_DOWN   &kp PAGE_UP   &warpd_normal    &trans
  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3       &bt BT_SEL 4    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
  &trans        &out OUT_USB      &out OUT_BLE       &out OUT_TOG       &trans          &trans          &kp HOME        &kp END       &trans           &trans
                                  &trans             &trans             &trans          &trans          &trans          &trans
            >;

            label = "NAV";
        };
    };
};
