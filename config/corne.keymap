/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
            require-prior-idle-ms = <50>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            require-prior-idle-ms = <50>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <9 8>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <20 21>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 19>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <3 4>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 16>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
        thumb_lt: thumb_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };
        c_const: c_const {
            compatible = "zmk,behavior-caps-word";
            label = "C_STYLE_CONST";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE BACKSPACE>;
            mods = <(MOD_LSFT)>;
        };
        hsk: hold_or_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_OR_STICKY_KEY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };
        awm_super: awm_super {
            compatible = "zmk,behavior-tap-dance";
            label = "AWM_SUPER";
            #binding-cells = <0>;
            bindings = <&hsk LGUI LSHIFT>, <&lg>, <&lsg>;
        };
    };

    macros {
        lg: lg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 1 &kp LGUI>;
            label = "LG";
        };
        lsg: lsg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 1 &kp LGUI &kp LSHIFT>;
            label = "LSG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q                 &kp W             &kp E       &kp R              &kp T                 &kp Y                  &kp U              &kp I       &kp O                  &kp P                         &kp MINUS
&kp EQUAL         &hml RIGHT_CONTROL A  &hml RIGHT_ALT S  &kp D       &kp F              &kp G                 &kp H                  &kp J              &kp K       &hmr RIGHT_ALT L       &hmr RIGHT_CONTROL SEMICOLON  &kp APOS
&kp LEFT_BRACKET  &hml LEFT_SHIFT Z     &hml LEFT_GUI X   &kp C       &kp V              &kp B                 &kp N                  &kp M              &kp COMMA   &hmr RIGHT_GUI PERIOD  &hmr RIGHT_SHIFT SLASH        &kp RIGHT_BRACKET
                                                          &awm_super  &thumb_lt 2 ENTER  &thumb_lt 3 ESCAPE    &thumb_lt 1 BACKSPACE  &thumb_lt 3 SPACE  &caps_word
            >;
        };

        num_layer {
            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
&trans  &trans        &trans        &trans        &trans        &kp F11         &kp F12       &trans        &trans        &trans        &trans        &trans
                                    &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };

        sym_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        nav_layer {
            bindings = <
&trans      &trans        &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans          &trans          &kp PAGE_DOWN   &kp PAGE_UP   &trans           &trans  &ext_power EP_ON
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3       &bt BT_SEL 4    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &ext_power EP_OFF
&trans      &trans        &out OUT_USB      &out OUT_BLE       &out OUT_TOG       &trans          &trans          &kp HOME        &kp END       &trans           &trans  &ext_power EP_TOG
                                            &trans             &trans             &trans          &trans          &trans          &trans
            >;
        };
    };
};
